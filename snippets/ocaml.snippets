# Ripped off markusm mottl's ocaml snippets
# Porting all the ultisnips
snippet open
	let open ${1:module} in
	${2:e}
snippet try
	try ${1:e}
	with ${2:Not_found} -> ${3:()}
snippet ref
	let ${1:name} = ref ${2:val} in
	${3:e}
snippet ml
	module ${1:Mod} = ${2:Functor}(${3:Arg})
snippet matchl
	match ${1:list} with
	| [] -> ${2:()}
	| x :: xs -> ${3:()}
snippet matcho
	match ${1:x} with
	| Some(${2:y}) -> ${3:()}
	| None -> ${4:()}
snippet fun
	( fun ${1:x} -> ${2:x} )
snippet map
	${1:var} |> ${2:List}.map ${3:f}
snippet emap
	${1:enum} |> Enum.map ${2:f}
snippet amap
	${1:array} |> Array.map ${2:f}
snippet lmap
	${1:list} |> List.map ${2:f}
snippet filter
	${1:var} |> ${2:List}.filter ${3:f}
snippet efilter
	${1:enum} |> Enum.filter ${2:f}
snippet afilter
	${1:array} |> Array.filter ${2:f}
snippet lfilter
	${1:list} |> List.filter ${2:f}
# comment
snippet cc
	(* ${1:comment} *)
# let
snippet let
	let ${1:x} = ${2:v} in
	${3:e}
# let rec
snippet lr
	let rec ${1:f} =
	  ${2:expr}
# if-then-else
snippet if
	if ${1:(* condition *)} then
	  ${2:(* A *)}
	else
	  ${3:(* B *)}
# if-then
snippet If
	if ${1:(* condition *)} then
	  ${2:(* A *)}
# while
snippet while
	while ${1:(* condition *)} do
	  ${2:(* A *)}
	done
# for
snippet for
	for ${1:i} = ${2:1} to ${3:10} do
	  ${4:(* BODY *)}
	done
# module
snippet mod
	module ${1:(* Name *)} = struct
	  ${2:(* BODY *)}
	end
# module : signature
snippet Mod
	module ${1:(* Name *)} : ${2:(* SIG *)} = struct
	  ${3:(* BODY *)}
	end
# sig
snippet sig
	sig
	  ${2:(* BODY *)}
	end
# sigf
snippet sigf
	functor (${1:Arg} : ${2:ARG}) -> ${3:(* BODY *)}
# functor
snippet func
	module ${1:M} (${2:Arg} : ${3:ARG}) = struct
	  ${4:(* BODY *)}
	end
# functor : signature
snippet Func
	module ${1:M} (${2:Arg} : ${3:ARG}) : ${4:SIG} = struct
	  ${5:(* BODY *)}
	end
# module type
snippet mot
	module type ${1:(* Name *)} = sig
	  ${2:(* BODY *)}
	end
# match
snippet match
	match ${1:(* e1 *)} with
	| ${2:p} -> ${3:e2}
# class
snippet class
	class ${1:name} = object
	  ${2:methods}
	end
# object
snippet obj
	object
	  ${2:methods}
	end
# begin-end
snippet beg
	begin
	  ${1:block}
	end
